# Security Scanning for Infrastructure & Scripts
name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * MON'  # Weekly on Monday at 6 AM UTC
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '**/*.ps1'
      - '.github/workflows/**'

# Required permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Code quality and security scanning
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: trivy-results.sarif

  # PowerShell module security scanning
  powershell-security:
    name: 🛡️ PowerShell Security Analysis
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PSScriptAnalyzer
        shell: powershell
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Run PSScriptAnalyzer security rules
        shell: powershell
        run: |
          $results = @()
          Get-ChildItem -Path . -Recurse -Filter "*.ps1" | ForEach-Object {
            $analysis = Invoke-ScriptAnalyzer -Path $_.FullName -Severity Warning,Error -IncludeRule PSUseShouldProcessForStateChangingFunctions,PSAvoidUsingPlainTextForPassword,PSAvoidUsingConvertToSecureStringWithPlainText,PSUsePSCredentialType
            $results += $analysis
          }
          
          if ($results.Count -gt 0) {
            Write-Host "Security issues found in PowerShell scripts:" -ForegroundColor Red
            $results | Format-Table -AutoSize
            $results | ConvertTo-Json | Out-File -FilePath "powershell-security-results.json"
          } else {
            Write-Host "No security issues found in PowerShell scripts." -ForegroundColor Green
          }

      - name: Upload PowerShell security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: powershell-security-results
          path: powershell-security-results.json

  # Terraform security and compliance
  terraform-security:
    name: 🏗️ Terraform Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.5.0'

      - name: Terraform Security Validation
        working-directory: terraform
        run: |
          echo "🔍 Running Terraform security validation..."
          terraform init -backend=false
          terraform validate
          echo "✅ Terraform validation completed"

      - name: Run Checkov on Terraform
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          config_file: .checkov.yml
          output_format: sarif
          output_file_path: checkov-terraform.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov-terraform.sarif') != ''
        with:
          sarif_file: checkov-terraform.sarif

  # Secret scanning
  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Compliance reporting
  compliance-report:
    name: 📋 Compliance Reporting
    runs-on: ubuntu-latest
    needs: [code-security, powershell-security, terraform-security, secret-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Generate compliance report
        run: |
          echo "# Security Compliance Report" > compliance-report.md
          echo "Generated on: $(date)" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Scan Results Summary" >> compliance-report.md
          echo "- ✅ Code security analysis completed (Trivy)" >> compliance-report.md
          echo "- ✅ PowerShell security analysis completed" >> compliance-report.md
          echo "- ✅ Terraform security validation completed (Checkov)" >> compliance-report.md
          echo "- ✅ Secret detection scanning completed" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Recommendations" >> compliance-report.md
          echo "- Review all identified vulnerabilities" >> compliance-report.md
          echo "- Address any infrastructure security gaps" >> compliance-report.md
          echo "- Fix PowerShell script security issues" >> compliance-report.md
          echo "- Rotate any exposed secrets immediately" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md

      - name: Create issue for security findings
        uses: actions/github-script@v6
        if: failure()
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Findings Require Attention',
              body: 'Automated security scans have identified issues that require review. Please check the latest workflow run for details.',
              labels: ['security', 'high-priority']
            })
